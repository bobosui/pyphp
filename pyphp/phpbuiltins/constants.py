# literals
true  = True
false = False
null  = None

# Error constants
E_ERROR             = 0x0001  # (integer) 	Fatal run-time errors. These indicate errors that can not be recovered from, such as a memory allocation problem. Execution of the script is halted. 	 
E_WARNING           = 0x0002  # (integer) 	Run-time warnings (non-fatal errors). Execution of the script is not halted. 	 
E_PARSE             = 0x0004  # (integer) 	Compile-time parse errors. Parse errors should only be generated by the parser. 	 
E_NOTICE            = 0x0008  # (integer) 	Run-time notices. Indicate that the script encountered something that could indicate an error, but could also happen in the normal course of running a script. 	 
E_CORE_ERROR        = 0x0010  # (integer) 	Fatal errors that occur during PHPs initial startup. This is like an E_ERROR, except it is generated by the core of PHP. 	 
E_CORE_WARNING      = 0x0020  # (integer) 	Warnings (non-fatal errors) that occur during PHPs initial startup. This is like an E_WARNING, except it is generated by the core of PHP. 	 
E_COMPILE_ERROR     = 0x0040  # (integer) 	Fatal compile-time errors. This is like an E_ERROR, except it is generated by the Zend Scripting Engine. 	 
E_COMPILE_WARNING   = 0x0080  # (integer) 	Compile-time warnings (non-fatal errors). This is like an E_WARNING, except it is generated by the Zend Scripting Engine. 	 
E_USER_ERROR        = 0x0100  # (integer) 	User-generated error message. This is like an E_ERROR, except it is generated in PHP code by using the PHP function trigger_error(). 	 
E_USER_WARNING      = 0x0200  # (integer) 	User-generated warning message. This is like an E_WARNING, except it is generated in PHP code by using the PHP function trigger_error(). 	 
E_USER_NOTICE       = 0x0400  # (integer) 	User-generated notice message. This is like an E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error(). 	 
E_STRICT            = 0x0800  # (integer) 	Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code. 	Since PHP 5 but not included in E_ALL until PHP 5.4.0
E_RECOVERABLE_ERROR = 0x1000  # (integer) 	Catchable fatal error. It indicates that a probably dangerous error occurred, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handle (see also set_error_handler()), the application aborts as it was an E_ERROR. 	Since PHP 5.2.0
E_DEPRECATED        = 0x2000  # (integer) 	Run-time notices. Enable this to receive warnings about code that will not work in future versions. 	Since PHP 5.3.0
E_USER_DEPRECATED   = 0x4000  # (integer) 	User-generated warning message. This is like an E_DEPRECATED, except it is generated in PHP code by using the PHP function trigger_error(). 	Since PHP 5.3.0
E_ALL               = 0x7fff  # (integer) 	All errors and warnings, as supported, except of level E_STRICT prior to PHP 5.4.0.
